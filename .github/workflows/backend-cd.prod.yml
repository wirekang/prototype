name: Backend CD

on:
  push:
    branches: ["production"]
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: yarn install --frozen-lockfile
      - run: yarn lint

      - name: Decrypt
        run: |
          PASSWORD=${{secrets.PASSWORD}} . scripts/decrypt.sh
          cat "secrets/out/github-actions.prod.env" >> $GITHUB_ENV

      - name: Copy test config
        run: cp secrets/out/config.test.json config.json

      - run: yarn test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{env.aws_access_key_id}}
          aws-secret-access-key: ${{env.aws_secret_access_key}}
          aws-region: ${{env.aws_region}}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{env.docker-registry}}

      - name: Create ECR Repositories
        run: |
          for r in $(grep 'image: \${DOCKER_REGISTRY}' $DOCKER_COMPOSE_FILE | sed -e 's/^.*\///')
          do
            aws ecr describe-repositories --repository-names $r \
              || aws ecr create-repository --repository-name $r
          done

      - name: Set DOCKER_REGISTRY
        run: echo "DOCKER_REGISTRY=${{env.docker_registry}}" >> $GITHUB_ENV

      - run: docker compose -f ${{env.docker_compose_file}} build
      - run: docker compose -f ${{env.docker_compose_file}} push

      - name: Set DOCKER_HOST
        run: echo "DOCKER_HOST=ssh://${{env.remote_user}}@${{env.remote_host}}" >> $GITHUB_ENV

      - run: echo "SSH_KEY=$(cat secrets/out/key.pem)" >> $GITHUB_ENV

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{env.SSH_KEY}}

      - name: Append to known_hosts
        run: ssh-keyscan -H ${{env.remote_host}} >> ~/.ssh/known_hosts

      - name: Login to ECR for remote Docker host
        uses: docker/login-action@v2
        with:
          registry: ${{env.docker-registry}}

      - run: docker compose -f ${{env.docker_compose_file}} pull
      - run: docker compose -f ${{env.docker_compose_file}} up -d
      - run: docker image prune -f
