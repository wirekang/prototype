name: Backend CD

on:
  push:
    branches: ["production"]
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: yarn install --frozen-lockfile
      - run: yarn lint
      - run: yarn test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}

      - name: Create ECR Repositories
        run: |
          for r in $(grep 'image: \${DOCKER_REGISTRY}' docker-compose.prod.yml | sed -e 's/^.*\///'); do
            aws ecr describe-repositories --repository-names $r || aws ecr create-repository --repository-name $r
          done

      - name: Set DOCKER_REGISTRY
        run: echo "DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}" >> $GITHUB_ENV

      # - run: docker compose -f docker-compose.prod.yml build
      # - run: docker compose -f docker-compose.prod.yml push

      - name: Set DOCKER_HOST
        run: echo "DOCKER_HOST=${{ secrets.DOCKER_HOST }}" >> $GITHUB_ENV

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.KEY }}

      - run: |
          aws ecr get-login-password --region ap-northeast-2 | \
          docker login --username AWS --password-stdin $DOCKER_REGISTRY

      # - name: Login to ECR for remote Docker host
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ secrets.DOCKER_REGISTRY }}

      - run: docker compose -f docker-compose.prod.yml pull
      - run: docker compose -f docker-compose.prod.yml up -d
